You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.


# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        num1, num2 = 0, 0
        mul = 1
        while l1 != None:
            num1 += (l1.val * mul)
            mul*=10
            l1 = l1.next
        mul = 1
        while l2 != None:
            num2 += (l2.val * mul)
            mul*=10
            l2 = l2.next
        sum1 = num1 + num2
        s = ListNode(0)
        s_tail = s
        while sum1>0:
            s_tail.next = ListNode(sum1%10)
            s_tail= s_tail.next
            sum1= sum1//10
        if s.next == None:
            return s
        return s.next